import { trackSelfDescribingEvent, CommonEventProperties, SelfDescribingJson } from '@snowplow/browser-tracker';
// Automatically generated by Snowtype

/**
 * Entity representing an article.
 */
export type Article = {
    /**
     * The unique identifier for the article.
     */
    article_id: string;
    /**
     * The author of the article.
     */
    author?: null | string;
    /**
     * The category under which the article is classified.
     */
    category?: null | string;
    /**
     * The position of the article in the search results or display.
     */
    position?: number | null;
    /**
     * A list of tags associated with the article.
     */
    tags?: string[] | null;
    /**
     * The title of the article.
     */
    title?: null | string;
    [property: string]: any;
}

/**
 * Entity capturing information about an A/B test.
 */
export type AbTest = {
    /**
     * Unique identifier for the experiment.
     */
    experiment_id: string;
    /**
     * Human-readable name of the experiment.
     */
    experiment_name?: null | string;
    /**
     * Unique identifier for the variant.
     */
    variant_id: string;
    /**
     * Human-readable name of the variant.
     */
    variant_name?: null | string;
    [property: string]: any;
}

/**
 * Details of an advertisement shown or interacted with
 */
export type Ad = {
    /**
     * Identifier of the ad shown or interacted with.
     */
    ad_id: string;
    /**
     * Identifier for the advertiser.
     */
    advertiser_id?: null | string;
    /**
     * ID of the marketing campaign.
     */
    campaign_id?: null | string;
    /**
     * The cost of the ad
     */
    cost?: number | null;
    /**
     * The cost model of the ad
     */
    cost_model?: CostModel;
    /**
     * ID of the creative variation shown.
     */
    creative_id?: null | string;
    /**
     * Where the ad was placed (e.g., header, sidebar, in-feed).
     */
    placement?: Placement;
    /**
     * The position/order in which the ad appeared.
     */
    position?: number | null;
    /**
     * Type of ad, e.g., banner, video, native.
     */
    type?: AdType;
    [property: string]: any;
}

/**
 * The cost model of the ad
 */
export type CostModel = "cpc" | "cpm" | "cpa";

/**
 * Where the ad was placed (e.g., header, sidebar, in-feed).
 */
export type Placement = "header" | "sidebar" | "footer" | "in-feed" | "native" | "search_results" | "content_body" | "video_pre-roll";

/**
 * Type of ad, e.g., banner, video, native.
 */
export type AdType = "banner" | "video" | "native" | "interstitial" | "rich_media" | "sponsored_content" | "search" | "email" | "audio";

/**
 * Data structure for when a user interacts with an article - Generated from a property rule
 */
export type ArticleInteractionArticleView = {
    /**
     * The type of article interaction
     */
    type: ArticleInteractionArticleViewType;
}

/**
 * The type of article interaction
 */
export type ArticleInteractionArticleViewType = "view";

/**
 * Tracks types of user conversions such as purchases, signups, downloads, etc. - Generated
 * from a property rule
 */
export type ConversionEventCreateAccount = {
    /**
     * The type of conversion the user completed.
     */
    conversion_type: ConversionEventCreateAccountConversionType;
}

/**
 * The type of conversion the user completed.
 */
export type ConversionEventCreateAccountConversionType = "signup";

/**
 * Tracks types of user conversions such as purchases, signups, downloads, etc. - Generated
 * from a property rule
 */
export type ConversionEventNewsletterSignup = {
    /**
     * The type of conversion the user completed.
     */
    conversion_type: ConversionEventNewsletterSignupConversionType;
}

/**
 * The type of conversion the user completed.
 */
export type ConversionEventNewsletterSignupConversionType = "newsletter_signup";

/**
 * Data structure for when a user interacts with an advertisement - Generated from a
 * property rule
 */
export type AdInteractionAdClick = {
    /**
     * The type of ad interaction
     */
    type: AdInteractionAdClickType;
}

/**
 * The type of ad interaction
 */
export type AdInteractionAdClickType = "click";

/**
 * Data structure for when a user interacts with an advertisement - Generated from a
 * property rule
 */
export type AdInteractionAdImpression = {
    /**
     * The type of ad interaction
     */
    type: AdInteractionAdImpressionType;
}

/**
 * The type of ad interaction
 */
export type AdInteractionAdImpressionType = "impression";

/**
 * Captures a search action by the user including the search term and resulting metadata. -
 * Generated from a property rule
 */
export type SearchPerformedQuickSearch = {
    search_type?: SearchPerformedQuickSearchSearchType;
    /**
     * The search term entered by the user.
     */
    term: string;
    /**
     * The total number of results returned for the search.
     */
    total_results?: number | null;
}

export type SearchPerformedQuickSearchSearchType = "quick";

/**
 * Entity representing an article. - Generated from a property rule
 */
export type ArticleQuickSearch = {
    /**
     * The unique identifier for the article.
     */
    article_id: string;
    /**
     * The author of the article.
     */
    author?: null | string;
    /**
     * The category under which the article is classified.
     */
    category?: null | string;
    /**
     * The position of the article in the search results or display.
     */
    position?: number | null;
    /**
     * A list of tags associated with the article.
     */
    tags?: string[] | null;
    /**
     * The title of the article.
     */
    title?: null | string;
    [property: string]: any;
}

/**
 * Captures a search action by the user including the search term and resulting metadata. -
 * Generated from a property rule
 */
export type SearchPerformedFullSearch = {
    search_type?: SearchPerformedFullSearchSearchType;
    /**
     * The search term entered by the user.
     */
    term: string;
    /**
     * The total number of results returned for the search.
     */
    total_results?: number | null;
}

export type SearchPerformedFullSearchSearchType = "full";

/**
 * Entity representing an article. - Generated from a property rule
 */
export type ArticleFullSearch = {
    /**
     * The unique identifier for the article.
     */
    article_id: string;
    /**
     * The author of the article.
     */
    author?: null | string;
    /**
     * The category under which the article is classified.
     */
    category?: null | string;
    /**
     * Include where in the results order the article was shown
     */
    position?: number | null;
    /**
     * A list of tags associated with the article.
     */
    tags?: string[] | null;
    /**
     * The title of the article.
     */
    title?: null | string;
    [property: string]: any;
}

/**
 * Creates a Snowplow Event Specification entity.
 */
export function createEventSpecification(eventSpecification: EventSpecification){
    return {
        schema:
            'iglu:com.snowplowanalytics.snowplow/event_specification/jsonschema/1-0-3',
        data: eventSpecification,
    }
}

/**
 * Automatically attached context for event specifications
 */
interface EventSpecification {
    id: string;
    name: string;
    data_product_id: string;
    data_product_name: string;
    data_product_domain: string;
}

type ContextsOrTimestamp<T = any> = Omit<CommonEventProperties<T>, 'context'> & { context?: SelfDescribingJson<T>[] | null | undefined }
/**
 * Track a Snowplow event for Article.
 * Entity representing an article.
 */
export function trackArticle<T extends {} = any>(article: Article & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = article;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo.media/article/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow Article entity.
 */
export function createArticle(article: Article){
    return {
        schema: 'iglu:com.demo.media/article/jsonschema/1-0-0',
        data: article
    }
}
/**
 * Track a Snowplow event for AbTest.
 * Entity capturing information about an A/B test.
 */
export function trackAbTest<T extends {} = any>(abTest: AbTest & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = abTest;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/ab_test/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow AbTest entity.
 */
export function createAbTest(abTest: AbTest){
    return {
        schema: 'iglu:com.demo/ab_test/jsonschema/1-0-0',
        data: abTest
    }
}
/**
 * Track a Snowplow event for Ad.
 * Details of an advertisement shown or interacted with
 */
export function trackAd<T extends {} = any>(ad: Ad & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = ad;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/ad/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow Ad entity.
 */
export function createAd(ad: Ad){
    return {
        schema: 'iglu:com.demo/ad/jsonschema/1-0-0',
        data: ad
    }
}
/**
 * Track a Snowplow event for ArticleInteractionArticleView.
 * Data structure for when a user interacts with an article - Generated from a property rule
 */
function trackArticleInteractionArticleView<T extends {} = any>(articleInteractionArticleView: ArticleInteractionArticleView & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = articleInteractionArticleView;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo.media/article_interaction/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Track a Snowplow event for ConversionEventCreateAccount.
 * Tracks types of user conversions such as purchases, signups, downloads, etc. - Generated from a property rule
 */
function trackConversionEventCreateAccount<T extends {} = any>(conversionEventCreateAccount: ConversionEventCreateAccount & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = conversionEventCreateAccount;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/conversion_event/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Track a Snowplow event for ConversionEventNewsletterSignup.
 * Tracks types of user conversions such as purchases, signups, downloads, etc. - Generated from a property rule
 */
function trackConversionEventNewsletterSignup<T extends {} = any>(conversionEventNewsletterSignup: ConversionEventNewsletterSignup & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = conversionEventNewsletterSignup;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/conversion_event/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Track a Snowplow event for AdInteractionAdClick.
 * Data structure for when a user interacts with an advertisement - Generated from a property rule
 */
function trackAdInteractionAdClick<T extends {} = any>(adInteractionAdClick: AdInteractionAdClick & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = adInteractionAdClick;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/ad_interaction/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Track a Snowplow event for AdInteractionAdImpression.
 * Data structure for when a user interacts with an advertisement - Generated from a property rule
 */
function trackAdInteractionAdImpression<T extends {} = any>(adInteractionAdImpression: AdInteractionAdImpression & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = adInteractionAdImpression;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/ad_interaction/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Track a Snowplow event for SearchPerformedQuickSearch.
 * Captures a search action by the user including the search term and resulting metadata. - Generated from a property rule
 */
function trackSearchPerformedQuickSearch<T extends {} = any>(searchPerformedQuickSearch: SearchPerformedQuickSearch & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = searchPerformedQuickSearch;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/search_performed/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow ArticleQuickSearch entity.
 */
export function createArticleQuickSearch(articleQuickSearch: ArticleQuickSearch){
    return {
        schema: 'iglu:com.demo.media/article/jsonschema/1-0-0',
        data: articleQuickSearch
    }
}
/**
 * Track a Snowplow event for SearchPerformedFullSearch.
 * Captures a search action by the user including the search term and resulting metadata. - Generated from a property rule
 */
function trackSearchPerformedFullSearch<T extends {} = any>(searchPerformedFullSearch: SearchPerformedFullSearch & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = searchPerformedFullSearch;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.demo/search_performed/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow ArticleFullSearch entity.
 */
export function createArticleFullSearch(articleFullSearch: ArticleFullSearch){
    return {
        schema: 'iglu:com.demo.media/article/jsonschema/1-0-0',
        data: articleFullSearch
    }
}

/**
 * Tracks a ArticleView event specification.
 * ID: 207d6f27-a125-402a-b515-d40064d0f1c4
 */
export function trackArticleViewSpec(articleView: ArticleInteractionArticleView & ContextsOrTimestamp<Article>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '207d6f27-a125-402a-b515-d40064d0f1c4',
        name: 'Article View',
        data_product_id: '98f633e6-ab32-43a8-8e07-0d6124da0ee7',
        data_product_name: 'Editorial Content Engagement',
        data_product_domain: 'Product'
    });

    const context = Array.isArray(articleView.context)
        ? [...articleView.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedArticleView = {
        ...articleView,
        context,
    };

    trackArticleInteractionArticleView<Article | EventSpecification>(modifiedArticleView, trackers);
}
/**
 * Tracks a CreateAccount event specification.
 * ID: 40ffc5df-9007-460b-8be1-79db97731299
 */
export function trackCreateAccountSpec(createAccount: ConversionEventCreateAccount & ContextsOrTimestamp, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '40ffc5df-9007-460b-8be1-79db97731299',
        name: 'Create Account',
        data_product_id: 'ead1f30f-1234-4350-a112-02003991e391',
        data_product_name: 'Customer Acquisition',
        data_product_domain: 'Marketing'
    });

    const context = Array.isArray(createAccount.context)
        ? [...createAccount.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedCreateAccount = {
        ...createAccount,
        context,
    };

    trackConversionEventCreateAccount<Record<string, unknown> | EventSpecification>(modifiedCreateAccount, trackers);
}
/**
 * Tracks a NewsletterSignup event specification.
 * ID: 48dac2dc-e478-49a0-875f-ce27281c84f4
 */
export function trackNewsletterSignupSpec(newsletterSignup: ConversionEventNewsletterSignup & ContextsOrTimestamp<AbTest>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '48dac2dc-e478-49a0-875f-ce27281c84f4',
        name: 'Newsletter Signup',
        data_product_id: 'ead1f30f-1234-4350-a112-02003991e391',
        data_product_name: 'Customer Acquisition',
        data_product_domain: 'Marketing'
    });

    const context = Array.isArray(newsletterSignup.context)
        ? [...newsletterSignup.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedNewsletterSignup = {
        ...newsletterSignup,
        context,
    };

    trackConversionEventNewsletterSignup<AbTest | EventSpecification>(modifiedNewsletterSignup, trackers);
}
/**
 * Tracks a AdClick event specification.
 * ID: 5f04be54-cc64-4e50-90f6-a85df727a50e
 */
export function trackAdClickSpec(adClick: AdInteractionAdClick & ContextsOrTimestamp<Ad>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '5f04be54-cc64-4e50-90f6-a85df727a50e',
        name: 'Ad Click',
        data_product_id: '58526f0a-c5b6-4d08-bc4f-199836217d0c',
        data_product_name: 'Advertising Performance',
        data_product_domain: 'Marketing'
    });

    const context = Array.isArray(adClick.context)
        ? [...adClick.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedAdClick = {
        ...adClick,
        context,
    };

    trackAdInteractionAdClick<Ad | EventSpecification>(modifiedAdClick, trackers);
}
/**
 * Tracks a AdImpression event specification.
 * ID: 6511cf68-d715-4729-b83e-4c7ede68ccbb
 */
export function trackAdImpressionSpec(adImpression: AdInteractionAdImpression & ContextsOrTimestamp<Ad>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '6511cf68-d715-4729-b83e-4c7ede68ccbb',
        name: 'Ad Impression',
        data_product_id: '58526f0a-c5b6-4d08-bc4f-199836217d0c',
        data_product_name: 'Advertising Performance',
        data_product_domain: 'Marketing'
    });

    const context = Array.isArray(adImpression.context)
        ? [...adImpression.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedAdImpression = {
        ...adImpression,
        context,
    };

    trackAdInteractionAdImpression<Ad | EventSpecification>(modifiedAdImpression, trackers);
}
/**
 * Tracks a QuickSearch event specification.
 * ID: 73383b45-f16a-4249-b7d1-3edf0731713b
 */
export function trackQuickSearchSpec(quickSearch: SearchPerformedQuickSearch & ContextsOrTimestamp<ArticleQuickSearch>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '73383b45-f16a-4249-b7d1-3edf0731713b',
        name: 'Quick Search',
        data_product_id: '98f633e6-ab32-43a8-8e07-0d6124da0ee7',
        data_product_name: 'Editorial Content Engagement',
        data_product_domain: 'Product'
    });

    const context = Array.isArray(quickSearch.context)
        ? [...quickSearch.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedQuickSearch = {
        ...quickSearch,
        context,
    };

    trackSearchPerformedQuickSearch<ArticleQuickSearch | EventSpecification>(modifiedQuickSearch, trackers);
}
/**
 * Tracks a FullSearch event specification.
 * ID: c2a5edb5-594f-444f-9d22-eed1081b41bf
 */
export function trackFullSearchSpec(fullSearch: SearchPerformedFullSearch & ContextsOrTimestamp<ArticleFullSearch>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: 'c2a5edb5-594f-444f-9d22-eed1081b41bf',
        name: 'Full Search',
        data_product_id: '98f633e6-ab32-43a8-8e07-0d6124da0ee7',
        data_product_name: 'Editorial Content Engagement',
        data_product_domain: 'Product'
    });

    const context = Array.isArray(fullSearch.context)
        ? [...fullSearch.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedFullSearch = {
        ...fullSearch,
        context,
    };

    trackSearchPerformedFullSearch<ArticleFullSearch | EventSpecification>(modifiedFullSearch, trackers);
}


